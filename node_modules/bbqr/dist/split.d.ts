import { FileType, SplitOptions, SplitResult } from './types';
/**
 * Converts the input bytes into a series of QR codes, ensuring that the most efficient QR code
 * version is used.
 *
 * NOTE: When the default 'Z' (Zlib) encoding is selected, it is possible that the actual used encoding
 * will be '2' (Base32) in case Zlib compression does not reduce the size of the output.
 *
 * @param raw The input bytes to split and encode.
 * @param fileType The file type to use. Refer to BBQr spec.
 * @param opts An optional SplitOptions object.
 *
 * @returns An object containing the version of the QR codes, their string parts, and the actual encoding used.
 */
export declare function splitQRs(raw: Uint8Array, fileType: string, opts?: SplitOptions): SplitResult;
/**
 * Takes a given given input (Uint8Array, File, or string) and detects its FileType.
 * PSBTs and Bitcoin transactions are supported in raw binary, Base64, or hex format.
 *
 * @param input - The input to detect the FileType of.
 * @returns A Promise that resolves to an object containing the FileType and raw data.
 */
export declare function detectFileType(input: File | Uint8Array | string): Promise<{
    fileType: FileType;
    raw: Uint8Array;
}>;
